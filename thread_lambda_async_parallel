https://www.cppstories.com/2020/05/lambdas-async.html/



std::vector<int> numbers(100);
    
std::thread iotaThread([&numbers](int startArg) {
    std::iota(numbers.begin(), numbers.end(), startArg);
    std::cout << "calling from: " << std::this_thread::get_id() << " thread id\n";
    }, 10
);

iotaThread.join();
std::cout << "printing numbers in main (id " << std::this_thread::get_id() << "):\n";
for (auto& num : numbers)
    std::cout << num << ", ";
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
std::atomic<int> counter = 0;

std::vector<std::thread> threads;
for (int i = 0; i < 5; ++i) {
    threads.push_back(std::thread([&counter]() {
        for (int i = 0; i < 100; ++i) {
            counter.fetch_add(1);
        }
    }));
}

for (auto& thread : threads) {
    thread.join();
}

std::cout << counter.load() << std::endl;
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
std::vector<int> numbers(100);

std::future<void> iotaFuture = std::async(std::launch::async, 
    [&numbers, startArg = 10]() {
        std::iota(numbers.begin(), numbers.end(), startArg);
        std::cout << "calling from: " << std::this_thread::get_id() 
                  << " thread id\n";
    }
);

iotaFuture.get(); // make sure we get the results...
std::cout << "printing numbers in main (id " << std::this_thread::get_id() << "):\n";
for (auto& num : numbers)
    std::cout << num << ", ";
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
std::future<std::vector<int>> iotaFuture = std::async(std::launch::async, [startArg = 10]() {
        std::vector<int> numbers(100);
        std::iota(numbers.begin(), numbers.end(), startArg);
        std::cout << "calling from: " 
                  << std::this_thread::get_id() << " thread id\n";
        return numbers;
    }
);

auto vec = iotaFuture.get(); // make sure we get the results...
// ...
